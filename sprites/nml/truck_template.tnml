<tal:truck define="properties vehicle.properties">
// -- begin ${properties.title} -- <!--! this adds a comment to aid reading the final nml -->

// some of the CAPS identifiers used are NML built-ins, some are still defined by CPP (legacy).  No easy way to tell except by searching...

spriteset(${vehicle.id}_ss, "sprites/graphics/${properties.truck_graphics_file}") {
  spriteset_template_truck_16(0, 20) // (search 'sprites/nml' to find where spriteset templates are defined)  
}

spritegroup ${vehicle.id}_sg {
    loaded:  ${vehicle.id}_ss;
    loading: ${vehicle.id}_ss;
}

// include the trailer vehicles if needed 
// if truck has no trailers (e.g. solo truck), trailers list will be empty so no trailers will be included 
<tal:render_trailer_vehicles repeat="trailer vehicle.trailers">
  //-- begin ${trailer.id} -- // <!--! this adds a comment to aid reading the final nml -->
  ${trailer.render(truck=vehicle)}
  //-- end ${trailer.id} -- // <!--! another comment to aid reading the final nml  -->
</tal:render_trailer_vehicles>

// add the trailer vehicles to articulated consist (if needed) 
// if truck has no trailers (e.g. solo truck), switch will be called anyway but no trailers added
switch (FEAT_ROADVEHS, SELF, ${vehicle.id}_articulated_cb_switch, extra_callback_info1) {
    <tal:build_trailers repeat="n range(len(vehicle.trailers))">
    ${n+1}: return ${vehicle.id + '_trailer_' + str(n+1)};
    </tal:build_trailers>
  return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}


// the cargo subtype switches are shared globally, no unique identifiers per truck
// they're called from here, appropriate to the truck type
switch (FEAT_ROADVEHS, SELF, ${vehicle.id}_switch_cargo_subtype, ${properties.truck_type}) {
    GLOBAL_TRUCK_TYPE_DRAWBAR: return switch_cb_cargo_subtypes_drawbar_truck;
    GLOBAL_TRUCK_TYPE_FIFTH_WHEEL: return switch_cb_cargo_subtypes_fifth_wheel_truck;
    return CB_RESULT_NO_TEXT;
}

// -- print some of the vehicle non-nml properties to aid debugging -- //
// truck_type    ${properties.truck_type}
// truck_num_trailers  ${properties.truck_num_trailers}
// fifth_wheel_truck_capacity_fraction   ${properties.fifth_wheel_truck_capacity_fraction}

item(FEAT_ROADVEHS, ${vehicle.id}, ${properties.numeric_id}) {
    property {
        name:                           string(str_name_${vehicle.id});
        climates_available:             ALL_CLIMATES; // nml constant
        sound_effect:                   SOUND_TRUCK_START_2; //nml constant - likely this will be replaced by python global vars  
        visual_effect:                  visual_effect(VISUAL_EFFECT_DIESEL, ${properties.truck_smoke_offset}); // nml constant for DIESEL
        introduction_date:              date(${properties.truck_intro_date},01,01); // config just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 ${properties.truck_capacity};
        sprite_id:                      SPRITE_ID_NEW_ROADVEH; //enable new graphics - nml constant
        speed:                          ${properties.truck_speed}mph;
        power:                          ${properties.truck_power}hp;
        weight:                         ${properties.truck_weight};
        tractive_effort_coefficient:    GLOBAL_DEFAULT_TE_COEFFICIENT; // cpp constant - may need to vary per truck
        cost_factor:                    ${properties.truck_buy_cost};
        running_cost_factor:            ${properties.truck_run_cost};
        refittable_cargo_classes:       bitmask(THIS_ALLOWED_CARGO_CLASSES); // cpp constant
        non_refittable_cargo_classes:   bitmask(THIS_DISALLOWED_CARGO_CLASSES); // cpp constant
        cargo_allow_refit:              [THIS_ALLOWED_CARGOS]; // cpp constant
        cargo_disallow_refit:           [THIS_DISALLOWED_CARGOS]; //cpp constant
        misc_flags:                     bitmask(ROADVEH_FLAG_2CC, ROADVEH_FLAG_AUTOREFIT); // nml constants
        model_life:                     ${properties.truck_model_life};
        vehicle_life:                   ${properties.truck_vehicle_life};
    }
    graphics {
        length:                         ${properties.truck_length};
        purchase_cargo_capacity:        ${vehicle.getTotalConsistCapacity()};
        cargo_subtype_text:             ${vehicle.id}_switch_cargo_subtype;
        articulated_part:               ${vehicle.id}_articulated_cb_switch; // always call articulated switch, trailers will only be built if needed 
        default:                        ${vehicle.id}_sg;
    }
}


// -- end ${properties.title} -- <!--! another comment to aid reading the final nml  -->
</tal:truck>